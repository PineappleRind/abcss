"use strict";export default class Parser{constructor(){return this.expecting=new Set(["selector","assignment"]),this.cur={line:0,col:0},this.tokens={statementEnd:{value:/\n|;/g,expecting:"selector",translation:"} "},selector:{value:/[^&=\(\)]/g,expecting:["selector","assignment"],multi:!0},assignment:{value:"=",expecting:"property",translation:" { "},property:{value:/([a-z]|[A-Z]|\-)/g,expecting:["property","separator","valueBegin"],multi:!0},separator:{value:"&",expecting:"property",translation:this.separatorHandler},valueBegin:{value:"\\(",expecting:"value",translation:": "},value:{value:/[^\(\)\n]/g,expecting:["valueEnd","value"],multi:!0},valueEnd:{value:"\\)",expecting:["property","value","statementEnd"],translation:"; "}},this}parse(e){e=e.replaceAll(" ","");let t="",n="";for(let i=0;i<e.length;i++){"\n"===e[i]&&this.cur.line++,this.cur.col++;let a=!1;if(Array.from(this.expecting).every((r,l)=>{let s=this.tokens[r];return!e[i].match(s.value)||(this.expecting.clear(),s.multi?n+=e[i]:(t+=n+(s.translation||""),n=""),s.expecting instanceof Array?s.expecting.forEach(e=>this.expecting.add(e)):this.expecting.add(s.expecting),a=!0,!1)}),!a)throw SyntaxError(`Unexpected token "${e[i]}". Was expecting ${Array.from(this.expecting.keys()).join(", ")}. (Line ${this.cur.line} Col ${this.cur.col})`)}return t}}